//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InputSpeedExamination_Controller.ServiceReference {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="WebService", ConfigurationName="ServiceReference.ControllerServiceSoap")]
    public interface ControllerServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/GetStats", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetStats(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/GetStats", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStatsAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/GetBatchList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetBatchList();
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/GetBatchList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBatchListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/CreateNewBatch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateNewBatch(string BatchTitle, string IncludeIP, string IncludePaper);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/CreateNewBatch", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateNewBatchAsync(string BatchTitle, string IncludeIP, string IncludePaper);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/UpdateBatch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateBatch(string BatchID, string BatchTitle, string IncludeIP, string IncludePaper);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/UpdateBatch", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateBatchAsync(string BatchID, string BatchTitle, string IncludeIP, string IncludePaper);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/DeleteBatch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteBatch(string BatchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/DeleteBatch", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteBatchAsync(string BatchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/GetAllContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAllContent();
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/GetAllContent", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllContentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/CreateNewContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateNewContent(string Title, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/CreateNewContent", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateNewContentAsync(string Title, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/UpdateContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateContent(string ContentID, string Title, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/UpdateContent", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateContentAsync(string ContentID, string Title, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/DeleteContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteContent(string ContentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/DeleteContent", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteContentAsync(string ContentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/GetContentByBatchID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetContentByBatchID(string IncludePaper);
        
        [System.ServiceModel.OperationContractAttribute(Action="WebService/GetContentByBatchID", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetContentByBatchIDAsync(string IncludePaper);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ControllerServiceSoapChannel : InputSpeedExamination_Controller.ServiceReference.ControllerServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControllerServiceSoapClient : System.ServiceModel.ClientBase<InputSpeedExamination_Controller.ServiceReference.ControllerServiceSoap>, InputSpeedExamination_Controller.ServiceReference.ControllerServiceSoap {
        
        public ControllerServiceSoapClient() {
        }
        
        public ControllerServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControllerServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetStats(string ID) {
            return base.Channel.GetStats(ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStatsAsync(string ID) {
            return base.Channel.GetStatsAsync(ID);
        }
        
        public System.Data.DataSet GetBatchList() {
            return base.Channel.GetBatchList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBatchListAsync() {
            return base.Channel.GetBatchListAsync();
        }
        
        public string CreateNewBatch(string BatchTitle, string IncludeIP, string IncludePaper) {
            return base.Channel.CreateNewBatch(BatchTitle, IncludeIP, IncludePaper);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewBatchAsync(string BatchTitle, string IncludeIP, string IncludePaper) {
            return base.Channel.CreateNewBatchAsync(BatchTitle, IncludeIP, IncludePaper);
        }
        
        public string UpdateBatch(string BatchID, string BatchTitle, string IncludeIP, string IncludePaper) {
            return base.Channel.UpdateBatch(BatchID, BatchTitle, IncludeIP, IncludePaper);
        }
        
        public System.Threading.Tasks.Task<string> UpdateBatchAsync(string BatchID, string BatchTitle, string IncludeIP, string IncludePaper) {
            return base.Channel.UpdateBatchAsync(BatchID, BatchTitle, IncludeIP, IncludePaper);
        }
        
        public bool DeleteBatch(string BatchID) {
            return base.Channel.DeleteBatch(BatchID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBatchAsync(string BatchID) {
            return base.Channel.DeleteBatchAsync(BatchID);
        }
        
        public System.Data.DataSet GetAllContent() {
            return base.Channel.GetAllContent();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllContentAsync() {
            return base.Channel.GetAllContentAsync();
        }
        
        public string CreateNewContent(string Title, string Content) {
            return base.Channel.CreateNewContent(Title, Content);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewContentAsync(string Title, string Content) {
            return base.Channel.CreateNewContentAsync(Title, Content);
        }
        
        public string UpdateContent(string ContentID, string Title, string Content) {
            return base.Channel.UpdateContent(ContentID, Title, Content);
        }
        
        public System.Threading.Tasks.Task<string> UpdateContentAsync(string ContentID, string Title, string Content) {
            return base.Channel.UpdateContentAsync(ContentID, Title, Content);
        }
        
        public bool DeleteContent(string ContentID) {
            return base.Channel.DeleteContent(ContentID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteContentAsync(string ContentID) {
            return base.Channel.DeleteContentAsync(ContentID);
        }
        
        public System.Data.DataSet GetContentByBatchID(string IncludePaper) {
            return base.Channel.GetContentByBatchID(IncludePaper);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetContentByBatchIDAsync(string IncludePaper) {
            return base.Channel.GetContentByBatchIDAsync(IncludePaper);
        }
    }
}
